{"version":3,"sources":["../src/index.ts","../src/model/index.ts","../src/lark/index.ts"],"sourcesContent":["import _ from 'lodash';\nimport createModelService from './model';\nimport { createEntry, FnService } from \"byted-apaas-utils\";\nimport exceptions from '@byted-apaas/server-common-node/utils/exceptions';\nimport client from './lark';\nimport {Logger} from \"@byted-apaas/server-common-node\";\n\nconst logger = new Logger();\n\nexport default {\n  _: {\n    ..._,\n    sleep: (ms: number) => new Promise((resolve) => setTimeout(resolve, ms)),\n  },\n  createModelService,\n  createEntry,\n  FnService,\n  lark: client,\n  exceptions,\n  oql: {\n    selectAll:   async (query: string) => {\n      if (!query.toUpperCase().includes('ORDER')) {\n        logger.warn('这个 SQL 没有包含 ORDER BY，数据量大的时候可能有问题')\n      }\n      logger.log(query)\n      const pageSize = 200;\n      let page = 1;\n      let result: any[] = []\n\n      while (true) {\n        const offset = (page - 1) * pageSize;\n        const finalQuery = `\n        ${query} \n        LIMIT ${pageSize} OFFSET ${offset}\n      `;\n\n        // @ts-ignore\n        const data = await application.data.oql(finalQuery).execute()\n        if (data.length === 0) {\n          break;\n        }\n        result = result.concat(data);\n        page++;\n      }\n\n      return result\n    }\n  }\n  // oqlService,\n  //\n}\n\n\n","import {FnService, BaseModelService, ObjectApiNames, SelectCond, FilterCond, ResultData} from \"byted-apaas-utils\";\n\nclass ModelService<T extends ObjectApiNames> extends BaseModelService<T> {\n  constructor(model: T) {\n    super({ model });\n  }\n  /**\n   * 查找所有符合条件的记录\n   * @param filter 筛选条件\n   * @param select 需返回的字段\n   * @param sort 排序字段\n   * @param desc 是否降序 默认`false`：升序;`true`：降序\n   * @returns 返回所有符合条件的记录\n   */\n  async find<U extends SelectCond<T>>(\n    {\n      filter = {},\n      select = [],\n      sort = [],\n      desc = false,\n    }: {\n      filter?: FilterCond<T>,\n      select?: U[],\n      sort?: U[],\n      desc?: boolean,\n    }\n  ) {\n    const returnData: ResultData<T, U>[] = [];\n\n    return this.findStream({\n      filter,\n      select,\n      sort,\n      desc,\n      handler(records) {\n        returnData.push(...(records as ResultData<T, U>[]));\n      },\n    }).then(() => returnData);\n  }\n}\n\nconst createModelService = <T extends ObjectApiNames>(\n  model: T\n): ModelService<T> => new ModelService<T>(model);\n\nexport default createModelService;\n","import * as lark from '@larksuiteoapi/node-sdk';\n\n// @ts-ignore\nconst client = new lark.Client({\n  // @ts-ignore\n  appId:application.globalVar.getVar('appId'),\n  // @ts-ignore\n  appSecret:application.globalVar.getVar('appSecret')\n})\n\nexport default client\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,OAAO;;;ACAd,SAAmB,wBAA2E;AAE9F,IAAM,eAAN,cAAqD,iBAAoB;AAAA,EACvE,YAAY,OAAU;AACpB,UAAM,EAAE,MAAM,CAAC;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASM,KACJ,IAWA;AAAA,+CAXA;AAAA,MACE,SAAS,CAAC;AAAA,MACV,SAAS,CAAC;AAAA,MACV,OAAO,CAAC;AAAA,MACR,OAAO;AAAA,IACT,GAMA;AACA,YAAM,aAAiC,CAAC;AAExC,aAAO,KAAK,WAAW;AAAA,QACrB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,QAAQ,SAAS;AACf,qBAAW,KAAK,GAAI,OAA8B;AAAA,QACpD;AAAA,MACF,CAAC,EAAE,KAAK,MAAM,UAAU;AAAA,IAC1B;AAAA;AACF;AAEA,IAAM,qBAAqB,CACzB,UACoB,IAAI,aAAgB,KAAK;AAE/C,IAAO,gBAAQ;;;AD3Cf,SAAS,aAAa,aAAAA,kBAAiB;AACvC,OAAO,gBAAgB;;;AEHvB,YAAY,UAAU;AAGtB,IAAM,SAAS,IAAS,YAAO;AAAA;AAAA,EAE7B,OAAM,YAAY,UAAU,OAAO,OAAO;AAAA;AAAA,EAE1C,WAAU,YAAY,UAAU,OAAO,WAAW;AACpD,CAAC;AAED,IAAO,eAAQ;;;AFLf,SAAQ,cAAa;AAErB,IAAM,SAAS,IAAI,OAAO;AAE1B,IAAO,cAAQ;AAAA,EACb,GAAG,iCACE,IADF;AAAA,IAED,OAAO,CAAC,OAAe,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,EAAE,CAAC;AAAA,EACzE;AAAA,EACA;AAAA,EACA;AAAA,EACA,WAAAC;AAAA,EACA,MAAM;AAAA,EACN;AAAA,EACA,KAAK;AAAA,IACH,WAAa,CAAO,UAAkB;AACpC,UAAI,CAAC,MAAM,YAAY,EAAE,SAAS,OAAO,GAAG;AAC1C,eAAO,KAAK,kIAAmC;AAAA,MACjD;AACA,aAAO,IAAI,KAAK;AAChB,YAAM,WAAW;AACjB,UAAI,OAAO;AACX,UAAI,SAAgB,CAAC;AAErB,aAAO,MAAM;AACX,cAAM,UAAU,OAAO,KAAK;AAC5B,cAAM,aAAa;AAAA,UACjB,KAAK;AAAA,gBACC,QAAQ,WAAW,MAAM;AAAA;AAIjC,cAAM,OAAO,MAAM,YAAY,KAAK,IAAI,UAAU,EAAE,QAAQ;AAC5D,YAAI,KAAK,WAAW,GAAG;AACrB;AAAA,QACF;AACA,iBAAS,OAAO,OAAO,IAAI;AAC3B;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAAA,EACF;AAAA;AAAA;AAGF;","names":["FnService","FnService"]}